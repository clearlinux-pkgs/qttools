Albert Astals Cid (1):
      Ensure FileAttributeSetTable is filled ordered so we get the same qch file each time

Andy Shaw (1):
      windeployqt: Account for debug version of ICU library when deploying

Antti Kokko (2):
      Add changes file for Qt 5.15.2
      Add changes file for Qt 5.12.10

Edward Welbourne (1):
      Clear out deprecated QLocale::Language values

Friedemann Kleint (6):
      Bump copyright year to 2021
      Qt Designer: Slow down wheel scrolling of the widget box
      Qt Designer: Fix saving of item view header visibility on page based containers
      Qt Designer: Fix alignment of horizontal QTableWidget headers
      Qt Designer: Fix alignment when adding new QTableWidget columns
      Assistant: Make QResultWidget linkColor stylable

Jani Heikkinen (2):
      Bump version
      Bump version

JiDe Zhang (1):
      QDoc: Fix possible crash in WebXMLGenerator

Kai Koehne (4):
      qt5_create_translation: Fix handling of directory dependencies
      CMake: Fix usage of qt_create_translation in a CTest
      Doc: Document attribution argument
      CMake: Fix handling of -extensions argument

Kai KÃ¶hne (4):
      Fix redeclared variable name
      Fix check for malformed input when decoding translations
      Fix regression in lconvert handling empty translations
      Examples: Don't use QDir::separator() in internal paths

Kai Pastor (1):
      Clamp registered collection time-stamp to SOURCE_DATE_EPOCH if set

Li Xinwei (1):
      Fix qdbusviewer.exe missing version and copyright information

Luca Di Sera (1):
      Doc: Fix a typo in the "Introduction to QDoc" documentation page

Paul Wicking (1):
      Doc: Remove mention of custom filters

Ralf Habacker (2):
      qtpaths: Add missing location types
      Replace prefined application name by a generic name

Tarja Sundqvist (7):
      Update commercial license headers
      Revert "Update commercial license headers"
      Bump version
      Bump version
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.4' into tqtc/lts-5.15-opensource
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.5' into tqtc/lts-5.15-opensource
      Merge remote-tracking branch 'origin/tqtc/lts-5.15.6' into tqtc/lts-5.15-opensource

Topi Reinio (11):
      qdoc: Avoid duplicates in \sincelist
      qdoc: Handle JSON as plain text
      qdoc: DocBook generator: Fix \headerfile generation
      qdoc: Skip ignored entries in .qhp
      qdoc: Avoid excess warnings for undocumented namespaces
      qdoc: Fix breadcrumb generation for normal page nodes
      qdoc: Ignore empty example meta tags
      qdoc: Fix addendums for QML signals that contain '.' in the name
      qdoc: Fix generation of TOC for basic QML/JS types
      qdoc: Don't clear the warning count in single-exec mode
      qdoc: Allow any type of page as qhp indexTitle

diff --git a/dist/changes-5.12.10 b/dist/changes-5.12.10
new file mode 100644
index 000000000..95c6a0b2f
--- /dev/null
+++ b/dist/changes-5.12.10
@@ -0,0 +1,26 @@
+Qt 5.12.10 is a bug-fix release. It maintains both forward and backward
+compatibility (source and binary) with Qt 5.12.9.
+
+For more details, refer to the online documentation included in this
+distribution. The documentation is also available online:
+
+  https://doc.qt.io/qt-5.12/index.html
+
+The Qt version 5.12 series is binary compatible with the 5.11.x series.
+Applications compiled for 5.11 will continue to run with 5.12.
+
+Some of the changes listed in this file include issue tracking numbers
+corresponding to tasks in the Qt Bug Tracker:
+
+  https://bugreports.qt.io/
+
+Each of these identifiers can be entered in the bug tracker to obtain more
+information about a particular change.
+
+****************************************************************************
+*                   Important Behavior Changes                             *
+****************************************************************************
+
+****************************************************************************
+*                          Library                                         *
+****************************************************************************
diff --git a/examples/assistant/remotecontrol/remotecontrol.cpp b/examples/assistant/remotecontrol/remotecontrol.cpp
index 916a08efd..8b39aa6ff 100644
--- a/examples/assistant/remotecontrol/remotecontrol.cpp
+++ b/examples/assistant/remotecontrol/remotecontrol.cpp
@@ -98,11 +98,11 @@ void RemoteControl::on_launchButton_clicked()
     if (process->state() == QProcess::Running)
         return;
 
-    QString app = QLibraryInfo::location(QLibraryInfo::BinariesPath) + QDir::separator();
+    QString app = QLibraryInfo::location(QLibraryInfo::BinariesPath);
 #if !defined(Q_OS_MAC)
-    app += QLatin1String("assistant");
+    app += QLatin1String("/assistant");
 #else
-    app += QLatin1String("Assistant.app/Contents/MacOS/Assistant");
+    app += QLatin1String("/Assistant.app/Contents/MacOS/Assistant");
 #endif
 
     ui.contentsCheckBox->setChecked(true);
@@ -113,8 +113,9 @@ void RemoteControl::on_launchButton_clicked()
     args << QLatin1String("-enableRemoteControl");
     process->start(app, args);
     if (!process->waitForStarted()) {
-        QMessageBox::critical(this, tr("Remote Control"),
-            tr("Could not start Qt Assistant from %1.").arg(app));
+        QMessageBox::critical(
+                this, tr("Remote Control"),
+                tr("Could not start Qt Assistant from %1.").arg(QDir::toNativeSeparators(app)));
         return;
     }
 
diff --git a/examples/assistant/simpletextviewer/assistant.cpp b/examples/assistant/simpletextviewer/assistant.cpp
index ceda2c384..f6d7d3d33 100644
--- a/examples/assistant/simpletextviewer/assistant.cpp
+++ b/examples/assistant/simpletextviewer/assistant.cpp
@@ -115,11 +115,11 @@ bool Assistant::startAssistant()
     }
 
     if (m_process->state() != QProcess::Running) {
-        QString app = QLibraryInfo::location(QLibraryInfo::BinariesPath) + QDir::separator();
+        QString app = QLibraryInfo::location(QLibraryInfo::BinariesPath);
 #ifndef Q_OS_DARWIN
-        app += QLatin1String("assistant");
+        app += QLatin1String("/assistant");
 #else
-        app += QLatin1String("Assistant.app/Contents/MacOS/Assistant");
+        app += QLatin1String("/Assistant.app/Contents/MacOS/Assistant");
 #endif
 
         const QString collectionDirectory = documentationDirectory();
@@ -135,7 +135,8 @@ bool Assistant::startAssistant()
         m_process->start(app, args);
 
         if (!m_process->waitForStarted()) {
-            showError(tr("Unable to launch Qt Assistant (%1): %2").arg(app, m_process->errorString()));
+            showError(tr("Unable to launch Qt Assistant (%1): %2")
+                              .arg(QDir::toNativeSeparators(app), m_process->errorString()));
             return false;
         }
     }
diff --git a/examples/assistant/simpletextviewer/findfiledialog.cpp b/examples/assistant/simpletextviewer/findfiledialog.cpp
index 1eab5ad7f..51b184075 100644
--- a/examples/assistant/simpletextviewer/findfiledialog.cpp
+++ b/examples/assistant/simpletextviewer/findfiledialog.cpp
@@ -112,9 +112,9 @@ void FindFileDialog::openFile()
         return;
 
     QString fileName = item->text(0);
-    QString path = directoryComboBox->currentText() + QDir::separator();
+    QString path = QDir(directoryComboBox->currentText()).filePath(fileName);
 
-    currentEditor->setContents(path + fileName);
+    currentEditor->setContents(path);
     close();
 }
 
diff --git a/src/assistant/assistant/mainwindow.cpp b/src/assistant/assistant/mainwindow.cpp
index 1c5de9b85..b09dfc1b5 100644
--- a/src/assistant/assistant/mainwindow.cpp
+++ b/src/assistant/assistant/mainwindow.cpp
@@ -912,7 +912,7 @@ void MainWindow::showAboutDialog()
             "<p>Version %2</p>"
             "<p>Browser: %3</p></center>"
             "<p>Copyright (C) %4 The Qt Company Ltd.</p>")
-            .arg(tr("Qt Assistant"), QLatin1String(QT_VERSION_STR), browser, QStringLiteral("2020")),
+            .arg(tr("Qt Assistant"), QLatin1String(QT_VERSION_STR), browser, QStringLiteral("2021")),
             resources);
         QLatin1String path(":/qt-project.org/assistant/images/assistant-128.png");
         aboutDia.setPixmap(QString(path));
diff --git a/src/assistant/help/doc/src/qthelp.qdoc b/src/assistant/help/doc/src/qthelp.qdoc
index 9b02c9612..0734d62a8 100644
--- a/src/assistant/help/doc/src/qthelp.qdoc
+++ b/src/assistant/help/doc/src/qthelp.qdoc
@@ -128,7 +128,7 @@
             \li .qhc
             \li The help collection file that QHelpEngine operates on. It can
                 contain references to any number of compressed help files as
-                well as additional information, such as custom filters.
+                well as additional information.
     \endtable
 
     \section1 Generating Qt Help
@@ -275,48 +275,14 @@
     The virtual folder tag is mandatory and the folder name must not
     contain any slashes (/).
 
-    \target Custom Filters
-    \section2 Custom Filters
-
-    The Qt help project file contains optional definitions of
-    custom filters. A custom filter contains a list of filter
-    attributes which will be used later to display only the documentation
-    set that has all those attributes assigned. So, when setting the
-    current filter in the QHelpEngine to \e {My Application 1.0} only
-    the documentation which has \e myapp and \e {1.0} set as filter
-    attributes will be shown.
-
-    \snippet doc_src_qthelp.qdoc 9
-
-    You can define any number of custom filters in a help project file.
-    It is important to know that you do not have to specify the filter
-    attributes in the same project file. These attributes can be defined
-    in any help file, in a filter section.
-
     \target Filter Section
     \section2 Filter Section
 
-    A filter section contains the actual documentation. One Qt help project
-    file may contain more than one filter sections. Every filter section
-    consists of four parts, the filter attributes section, the table of
-    contents, the keywords and the files list. In theory all parts are
-    optional but not specifying anything there will result in an empty
-    documentation set.
-
-    \section3 Filter Attributes
-
-    Every filter section should have filter attributes assigned to it, to
-    enable documentation filtering. If no filter attribute is defined, the
-    documentation will only be shown if no filtering occurs, meaning the
-    current custom filter in the QHelpEngine does not contain any filter
-    attributes.
-
-    \snippet doc_src_qthelp.qdoc 10
-
-    In this case, the filter attributes \e myapp and \e {1.0} are assigned to
-    the filter section. This means that all contents specified in this section
-    will only be shown if the current custom filter has \e myapp or \e {1.0},
-    or both, as filter attributes.
+    A filter section contains the actual documentation. A Qt help project
+    file may contain more than one filter section. Every filter section
+    consists of the table of contents, the keywords, and the files list.
+    In theory all parts are optional but not specifying anything there will
+    result in an empty documentation set.
 
     \section3 Table of Contents
 
diff --git a/src/assistant/help/qhelpcollectionhandler.cpp b/src/assistant/help/qhelpcollectionhandler.cpp
index 69782d45f..d7b319d19 100644
--- a/src/assistant/help/qhelpcollectionhandler.cpp
+++ b/src/assistant/help/qhelpcollectionhandler.cpp
@@ -2197,7 +2197,15 @@ bool QHelpCollectionHandler::registerIndexTable(const QHelpDBReader::IndexTable
     m_query->addBindValue(fileName);
     const QFileInfo fi(absoluteDocPath(fileName));
     m_query->addBindValue(fi.size());
-    m_query->addBindValue(fi.lastModified().toString(Qt::ISODate));
+    QDateTime lastModified = fi.lastModified();
+    if (qEnvironmentVariableIsSet("SOURCE_DATE_EPOCH")) {
+        const QString sourceDateEpochStr = qEnvironmentVariable("SOURCE_DATE_EPOCH");
+        bool ok;
+        const qlonglong sourceDateEpoch = sourceDateEpochStr.toLongLong(&ok);
+        if (ok && sourceDateEpoch < lastModified.toSecsSinceEpoch())
+            lastModified.setSecsSinceEpoch(sourceDateEpoch);
+    }
+    m_query->addBindValue(lastModified.toString(Qt::ISODate));
     if (!m_query->exec())
         return false;
 
diff --git a/src/assistant/help/qhelpsearchresultwidget.cpp b/src/assistant/help/qhelpsearchresultwidget.cpp
index b7d61b494..ff3408f3f 100644
--- a/src/assistant/help/qhelpsearchresultwidget.cpp
+++ b/src/assistant/help/qhelpsearchresultwidget.cpp
@@ -60,6 +60,7 @@ QT_BEGIN_NAMESPACE
 class QResultWidget : public QTextBrowser
 {
     Q_OBJECT
+    Q_PROPERTY(QColor linkColor READ linkColor WRITE setLinkColor)
 
 public:
     QResultWidget(QWidget *parent = nullptr)
@@ -68,6 +69,15 @@ public:
         connect(this, &QTextBrowser::anchorClicked,
                 this, &QResultWidget::requestShowLink);
         setContextMenuPolicy(Qt::NoContextMenu);
+        setLinkColor(palette().color(QPalette::Link));
+    }
+
+    QColor linkColor() const { return m_linkColor; }
+    void setLinkColor(const QColor &color)
+    {
+        m_linkColor = color;
+        const QString sheet = QString::fromLatin1("a { text-decoration: underline; color: %1 }").arg(m_linkColor.name());
+        document()->setDefaultStyleSheet(sheet);
     }
 
     void showResultPage(const QVector<QHelpSearchResult> results, bool isIndexing)
@@ -88,10 +98,10 @@ public:
             }
 
             for (const QHelpSearchResult &result : results) {
-                str << "<div style=\"text-align:left; font-weight:bold\"><a href=\""
-                    << result.url().toString() << "\">" << result.title() << "</a>"
-                    "<div style=\"color:green; font-weight:normal;"
-                    " margin:5px\">" << result.snippet() << "</div></div><p></p>";
+                str << "<div style=\"text-align:left\"><a href=\""
+                    << result.url().toString() << "\">"
+                    << result.title() << "</a></div>"
+                    "<div style =\"margin:5px\">" << result.snippet() << "</div>";
             }
         } else {
             str << "<div align=\"center\"><br><br><h2>"
@@ -114,6 +124,9 @@ signals:
 
 private slots:
     void setSource(const QUrl & /* name */) override {}
+
+private:
+    QColor m_linkColor;
 };
 
 
diff --git a/src/assistant/qhelpgenerator/helpgenerator.cpp b/src/assistant/qhelpgenerator/helpgenerator.cpp
index feab1e2d5..cbfb82507 100644
--- a/src/assistant/qhelpgenerator/helpgenerator.cpp
+++ b/src/assistant/qhelpgenerator/helpgenerator.cpp
@@ -445,7 +445,9 @@ bool HelpGeneratorPrivate::insertFiles(const QStringList &files, const QString &
     if (filterSetId < 0)
         return false;
     ++filterSetId;
-    for (int attId : qAsConst(filterAtts)) {
+    QList<int> attValues = filterAtts.values();
+    std::sort(attValues.begin(), attValues.end());
+    for (int attId : qAsConst(attValues)) {
         m_query->prepare(QLatin1String("INSERT INTO FileAttributeSetTable "
             "VALUES(?, ?)"));
         m_query->bindValue(0, filterSetId);
diff --git a/src/designer/src/components/propertyeditor/designerpropertymanager.cpp b/src/designer/src/components/propertyeditor/designerpropertymanager.cpp
index 27d265696..ecbc5be4a 100644
--- a/src/designer/src/components/propertyeditor/designerpropertymanager.cpp
+++ b/src/designer/src/components/propertyeditor/designerpropertymanager.cpp
@@ -1151,6 +1151,7 @@ void DesignerPropertyManager::slotPropertyDestroyed(QtProperty *property)
         m_fontManager.slotPropertyDestroyed(property);
         m_brushManager.slotPropertyDestroyed(property);
     }
+    m_alignDefault.remove(property);
 }
 
 QStringList DesignerPropertyManager::attributes(int propertyType) const
@@ -1255,6 +1256,12 @@ QVariant DesignerPropertyManager::attributeValue(const QtProperty *property, con
             return itIcon.value();
     }
 
+    if (attribute == alignDefaultAttribute()) {
+        Qt::Alignment v = m_alignDefault.value(property,
+                                               Qt::Alignment(Qt::AlignLeading | Qt::AlignHCenter));
+        return QVariant(uint(v));
+    }
+
     return QtVariantPropertyManager::attributeValue(property, attribute);
 }
 
@@ -1430,6 +1437,8 @@ void DesignerPropertyManager::setAttribute(QtProperty *property,
         emit attributeChanged(property, attribute, v);
 
         emit propertyChanged(property);
+    } else if (attribute == alignDefaultAttribute()) {
+        m_alignDefault[property] = Qt::Alignment(value.toUInt());
     }
     QtVariantPropertyManager::setAttribute(property, attribute, value);
 }
@@ -1477,6 +1486,16 @@ int DesignerPropertyManager::designerKeySequenceTypeId()
     return qMetaTypeId<PropertySheetKeySequenceValue>();
 }
 
+QString DesignerPropertyManager::alignDefaultAttribute()
+{
+    return QStringLiteral("alignDefault");
+}
+
+uint DesignerPropertyManager::alignDefault(const QtVariantProperty *prop)
+{
+    return prop->attributeValue(DesignerPropertyManager::alignDefaultAttribute()).toUInt();
+}
+
 bool DesignerPropertyManager::isPropertyTypeSupported(int propertyType) const
 {
     switch (propertyType) {
@@ -2184,6 +2203,16 @@ void DesignerPropertyManager::uninitializeProperty(QtProperty *property)
     QtVariantPropertyManager::uninitializeProperty(property);
 }
 
+bool DesignerPropertyManager::resetTextAlignmentProperty(QtProperty *property)
+{
+    const auto it = m_alignDefault.constFind(property);
+    if (it == m_alignDefault.cend())
+        return false;
+    QtVariantProperty *alignProperty = variantProperty(property);
+    alignProperty->setValue(DesignerPropertyManager::alignDefault(alignProperty));
+    alignProperty->setModified(false);
+    return true;
+}
 
 bool DesignerPropertyManager::resetFontSubProperty(QtProperty *property)
 {
diff --git a/src/designer/src/components/propertyeditor/designerpropertymanager.h b/src/designer/src/components/propertyeditor/designerpropertymanager.h
index abc6e385c..c3f55942a 100644
--- a/src/designer/src/components/propertyeditor/designerpropertymanager.h
+++ b/src/designer/src/components/propertyeditor/designerpropertymanager.h
@@ -135,6 +135,7 @@ public:
     QString valueText(const QtProperty *property) const override;
     QIcon valueIcon(const QtProperty *property) const override;
 
+    bool resetTextAlignmentProperty(QtProperty *property);
     bool resetFontSubProperty(QtProperty *property);
     bool resetIconSubProperty(QtProperty *subProperty);
 
@@ -156,6 +157,10 @@ public:
     static bool useIdBasedTranslations()
         { return m_IdBasedTranslations; }
 
+    static QString alignDefaultAttribute();
+
+    static uint alignDefault(const QtVariantProperty *prop);
+
 public Q_SLOTS:
     void setAttribute(QtProperty *property, const QString &attribute, const QVariant &value) override;
     void setValue(QtProperty *property, const QVariant &value) override;
@@ -200,6 +205,7 @@ private:
     PropertyToPropertyMap m_propertyToAlignV;
     PropertyToPropertyMap m_alignHToProperty;
     PropertyToPropertyMap m_alignVToProperty;
+    QHash<const QtProperty *, Qt::Alignment> m_alignDefault;
 
     QMap<QtProperty *, QMap<QPair<QIcon::Mode, QIcon::State>, QtProperty *> > m_propertyToIconSubProperties;
     QMap<QtProperty *, QPair<QIcon::Mode, QIcon::State> > m_iconSubPropertyToState;
diff --git a/src/designer/src/components/propertyeditor/propertyeditor.cpp b/src/designer/src/components/propertyeditor/propertyeditor.cpp
index 392f1c3f5..48a4120a9 100644
--- a/src/designer/src/components/propertyeditor/propertyeditor.cpp
+++ b/src/designer/src/components/propertyeditor/propertyeditor.cpp
@@ -1187,6 +1187,9 @@ void PropertyEditor::slotResetProperty(QtProperty *property)
     if (m_propertyManager->resetIconSubProperty(property))
         return;
 
+    if (m_propertyManager->resetTextAlignmentProperty(property))
+        return;
+
     if (!m_propertyToGroup.contains(property))
         return;
 
diff --git a/src/designer/src/components/taskmenu/itemlisteditor.cpp b/src/designer/src/components/taskmenu/itemlisteditor.cpp
index 8aca0916d..700cf136c 100644
--- a/src/designer/src/components/taskmenu/itemlisteditor.cpp
+++ b/src/designer/src/components/taskmenu/itemlisteditor.cpp
@@ -116,12 +116,17 @@ static QStringList c2qStringList(const char * const in[])
     return out;
 }
 
-void AbstractItemEditor::setupProperties(PropertyDefinition *propList)
+void AbstractItemEditor::setupProperties(const PropertyDefinition *propList,
+                                         Qt::Alignment alignDefault)
 {
     for (int i = 0; propList[i].name; i++) {
         int type = propList[i].typeFunc ? propList[i].typeFunc() : propList[i].type;
         int role = propList[i].role;
         QtVariantProperty *prop = m_propertyManager->addProperty(type, QLatin1String(propList[i].name));
+        if (role == Qt::TextAlignmentRole) {
+            prop->setAttribute(DesignerPropertyManager::alignDefaultAttribute(),
+                               QVariant(uint(alignDefault)));
+        }
         Q_ASSERT(prop);
         if (role == Qt::ToolTipPropertyRole || role == Qt::WhatsThisPropertyRole)
             prop->setAttribute(QStringLiteral("validationMode"), ValidationRichText);
@@ -148,9 +153,11 @@ void AbstractItemEditor::setupObject(QWidget *object)
     m_editorFactory->setFormWindowBase(fwb);
 }
 
-void AbstractItemEditor::setupEditor(QWidget *object, PropertyDefinition *propList)
+void AbstractItemEditor::setupEditor(QWidget *object,
+                                     const PropertyDefinition *propList,
+                                     Qt::Alignment alignDefault)
 {
-    setupProperties(propList);
+    setupProperties(propList, alignDefault);
     setupObject(object);
 }
 
@@ -208,6 +215,9 @@ void AbstractItemEditor::resetProperty(QtProperty *property)
     if (m_propertyManager->resetIconSubProperty(property))
         return;
 
+    if (m_propertyManager->resetTextAlignmentProperty(property))
+        return;
+
     BoolBlocker block(m_updatingBrowser);
 
     QtVariantProperty *prop = m_propertyManager->variantProperty(property);
@@ -243,15 +253,18 @@ void AbstractItemEditor::updateBrowser()
     for (QtVariantProperty *prop : qAsConst(m_properties)) {
         int role = m_propertyToRole.value(prop);
         QVariant val = getItemData(role);
+
+        bool modified = false;
         if (!val.isValid()) {
             if (role == ItemFlagsShadowRole)
                 val = QVariant::fromValue(defaultItemFlags());
             else
                 val = QVariant(int(prop->value().userType()), nullptr);
-            prop->setModified(false);
         } else {
-            prop->setModified(true);
+            modified = role != Qt::TextAlignmentRole
+                || val.toUInt() != DesignerPropertyManager::alignDefault(prop);
         }
+        prop->setModified(modified);
         prop->setValue(val);
     }
 
@@ -296,9 +309,11 @@ ItemListEditor::ItemListEditor(QDesignerFormWindowInterface *form, QWidget *pare
     connect(iconCache(), &DesignerIconCache::reloaded, this, &AbstractItemEditor::cacheReloaded);
 }
 
-void ItemListEditor::setupEditor(QWidget *object, PropertyDefinition *propList)
+void ItemListEditor::setupEditor(QWidget *object,
+                                 const PropertyDefinition *propList,
+                                 Qt::Alignment alignDefault)
 {
-    AbstractItemEditor::setupEditor(object, propList);
+    AbstractItemEditor::setupEditor(object, propList, alignDefault);
 
     if (ui.listWidget->count() > 0)
         ui.listWidget->setCurrentRow(0);
@@ -319,6 +334,8 @@ void ItemListEditor::on_newListItemButton_clicked()
 
     QListWidgetItem *item = new QListWidgetItem(m_newItemText);
     item->setData(Qt::DisplayPropertyRole, QVariant::fromValue(PropertySheetStringValue(m_newItemText)));
+    if (m_alignDefault != 0)
+        item->setTextAlignment(Qt::Alignment(m_alignDefault));
     item->setFlags(item->flags() | Qt::ItemIsEditable);
     if (row < ui.listWidget->count())
         ui.listWidget->insertItem(row, item);
@@ -466,6 +483,16 @@ void ItemListEditor::updateEditor()
     else
         m_propertyBrowser->clear();
 }
+
+uint ItemListEditor::alignDefault() const
+{
+    return m_alignDefault;
+}
+
+void ItemListEditor::setAlignDefault(uint newAlignDefault)
+{
+    m_alignDefault = newAlignDefault;
+}
 } // namespace qdesigner_internal
 
 QT_END_NAMESPACE
diff --git a/src/designer/src/components/taskmenu/itemlisteditor.h b/src/designer/src/components/taskmenu/itemlisteditor.h
index 97bcb19d9..c7dee8764 100644
--- a/src/designer/src/components/taskmenu/itemlisteditor.h
+++ b/src/designer/src/components/taskmenu/itemlisteditor.h
@@ -86,9 +86,11 @@ private slots:
 
 protected:
     virtual int defaultItemFlags() const = 0;
-    void setupProperties(PropertyDefinition *propDefs);
+    void setupProperties(const PropertyDefinition *propList,
+                         Qt::Alignment alignDefault = Qt::AlignLeading | Qt::AlignVCenter);
     void setupObject(QWidget *object);
-    void setupEditor(QWidget *object, PropertyDefinition *propDefs);
+    void setupEditor(QWidget *object, const PropertyDefinition *propDefs,
+                     Qt::Alignment alignDefault = Qt::AlignLeading | Qt::AlignVCenter);
     void injectPropertyBrowser(QWidget *parent, QWidget *widget);
     void updateBrowser();
     virtual void setItemData(int role, const QVariant &v) = 0;
@@ -112,12 +114,16 @@ class ItemListEditor: public AbstractItemEditor
 public:
     explicit ItemListEditor(QDesignerFormWindowInterface *form, QWidget *parent);
 
-    void setupEditor(QWidget *object, PropertyDefinition *propDefs);
+    void setupEditor(QWidget *object, const PropertyDefinition *propDefs,
+                     Qt::Alignment alignDefault = Qt::AlignLeading | Qt::AlignVCenter);
     QListWidget *listWidget() const { return ui.listWidget; }
     void setNewItemText(const QString &tpl) { m_newItemText = tpl; }
     QString newItemText() const { return m_newItemText; }
     void setCurrentIndex(int idx);
 
+    uint alignDefault() const;
+    void setAlignDefault(uint newAlignDefault);
+
 signals:
     void indexChanged(int idx);
     void itemChanged(int idx, int role, const QVariant &v);
@@ -145,6 +151,7 @@ private:
     void setPropertyBrowserVisible(bool v);
     void updateEditor();
     Ui::ItemListEditor ui;
+    uint m_alignDefault = 0;
     bool m_updating;
     QString m_newItemText;
 };
diff --git a/src/designer/src/components/taskmenu/tablewidgeteditor.cpp b/src/designer/src/components/taskmenu/tablewidgeteditor.cpp
index b5f41626c..6bf6d9faa 100644
--- a/src/designer/src/components/taskmenu/tablewidgeteditor.cpp
+++ b/src/designer/src/components/taskmenu/tablewidgeteditor.cpp
@@ -51,6 +51,7 @@ TableWidgetEditor::TableWidgetEditor(QDesignerFormWindowInterface *form, QDialog
 {
     m_columnEditor = new ItemListEditor(form, this);
     m_columnEditor->setObjectName(QStringLiteral("columnEditor"));
+    m_columnEditor->setAlignDefault(Qt::AlignCenter);
     m_columnEditor->setNewItemText(tr("New Column"));
     m_rowEditor = new ItemListEditor(form, this);
     m_rowEditor->setObjectName(QStringLiteral("rowEditor"));
@@ -136,11 +137,19 @@ TableWidgetContents TableWidgetEditor::fillContentsFromTableWidget(QTableWidget
     tblCont.fromTableWidget(tableWidget, false);
     tblCont.applyToTableWidget(ui.tableWidget, iconCache(), true);
 
-    tblCont.m_verticalHeader.applyToListWidget(m_rowEditor->listWidget(), iconCache(), true);
-    m_rowEditor->setupEditor(tableWidget, tableHeaderPropList);
-
-    tblCont.m_horizontalHeader.applyToListWidget(m_columnEditor->listWidget(), iconCache(), true);
-    m_columnEditor->setupEditor(tableWidget, tableHeaderPropList);
+    auto *header = tableWidget->verticalHeader();
+    auto headerAlignment = header != nullptr
+            ? header->defaultAlignment() : Qt::Alignment(Qt::AlignLeading | Qt::AlignVCenter);
+    tblCont.m_verticalHeader.applyToListWidget(m_rowEditor->listWidget(), iconCache(),
+                                               true, headerAlignment);
+    m_rowEditor->setupEditor(tableWidget, tableHeaderPropList, headerAlignment);
+
+    header = tableWidget->horizontalHeader();
+    headerAlignment = header != nullptr
+        ? header->defaultAlignment() : Qt::Alignment(Qt::AlignCenter);
+    tblCont.m_horizontalHeader.applyToListWidget(m_columnEditor->listWidget(), iconCache(),
+                                                 true, headerAlignment);
+    m_columnEditor->setupEditor(tableWidget, tableHeaderPropList, headerAlignment);
 
     setupEditor(tableWidget, tableItemPropList);
     if (ui.tableWidget->columnCount() > 0 && ui.tableWidget->rowCount() > 0)
diff --git a/src/designer/src/components/widgetbox/widgetboxtreewidget.cpp b/src/designer/src/components/widgetbox/widgetboxtreewidget.cpp
index 054d622a0..151180313 100644
--- a/src/designer/src/components/widgetbox/widgetboxtreewidget.cpp
+++ b/src/designer/src/components/widgetbox/widgetboxtreewidget.cpp
@@ -50,6 +50,7 @@
 #include <QtWidgets/qaction.h>
 #include <QtWidgets/qactiongroup.h>
 #include <QtWidgets/qmenu.h>
+#include <QtWidgets/qscrollbar.h>
 
 #include <QtCore/qfile.h>
 #include <QtCore/qtimer.h>
@@ -303,7 +304,15 @@ bool WidgetBoxTreeWidget::load(QDesignerWidgetBox::LoadMode loadMode)
         return false;
 
     const QString contents = QString::fromUtf8(f.readAll());
-    return loadContents(contents);
+    if (!loadContents(contents))
+        return false;
+    if (topLevelItemCount() > 0) {
+        // QTBUG-93099: Set the single step to the item height to have some
+        // size-related value.
+        const auto itemHeight = visualItemRect(topLevelItem(0)).height();
+        verticalScrollBar()->setSingleStep(itemHeight);
+    }
+    return true;
 }
 
 bool WidgetBoxTreeWidget::loadContents(const QString &contents)
diff --git a/src/designer/src/designer/versiondialog.cpp b/src/designer/src/designer/versiondialog.cpp
index 8e2e399e0..80bc2b6d2 100644
--- a/src/designer/src/designer/versiondialog.cpp
+++ b/src/designer/src/designer/versiondialog.cpp
@@ -160,7 +160,7 @@ VersionDialog::VersionDialog(QWidget *parent)
 
     lbl->setText(tr("%1"
                     "<br/>Copyright (C) %2 The Qt Company Ltd."
-                    ).arg(version, QStringLiteral("2020")));
+                    ).arg(version, QStringLiteral("2021")));
 
     lbl->setWordWrap(true);
     lbl->setOpenExternalLinks(true);
diff --git a/src/designer/src/lib/shared/qdesigner_command.cpp b/src/designer/src/lib/shared/qdesigner_command.cpp
index 04cbfeff3..d6a6416ae 100644
--- a/src/designer/src/lib/shared/qdesigner_command.cpp
+++ b/src/designer/src/lib/shared/qdesigner_command.cpp
@@ -2269,16 +2269,19 @@ void ListContents::createFromListWidget(const QListWidget *listWidget, bool edit
         m_items.append(ItemData(listWidget->item(i), editor));
 }
 
-void ListContents::applyToListWidget(QListWidget *listWidget, DesignerIconCache *iconCache, bool editor) const
+void ListContents::applyToListWidget(QListWidget *listWidget, DesignerIconCache *iconCache,
+                                     bool editor, Qt::Alignment alignmentDefault) const
 {
     listWidget->clear();
 
     int i = 0;
     for (const ItemData &entry : m_items) {
-        if (!entry.isValid())
-            new QListWidgetItem(TableWidgetContents::defaultHeaderText(i), listWidget);
-        else
-            listWidget->addItem(entry.createListItem(iconCache, editor));
+        auto *item = entry.isValid()
+            ? entry.createListItem(iconCache, editor)
+            : new QListWidgetItem(TableWidgetContents::defaultHeaderText(i));
+        if (item->textAlignment() == 0)
+            item->setTextAlignment(alignmentDefault);
+        listWidget->addItem(item);
         i++;
     }
 }
diff --git a/src/designer/src/lib/shared/qdesigner_command_p.h b/src/designer/src/lib/shared/qdesigner_command_p.h
index fc20745f7..3d2bd0fb3 100644
--- a/src/designer/src/lib/shared/qdesigner_command_p.h
+++ b/src/designer/src/lib/shared/qdesigner_command_p.h
@@ -865,7 +865,9 @@ struct QDESIGNER_SHARED_EXPORT ListContents {
     QTreeWidgetItem *createTreeItem(DesignerIconCache *iconCache) const;
 
     void createFromListWidget(const QListWidget *listWidget, bool editor);
-    void applyToListWidget(QListWidget *listWidget, DesignerIconCache *iconCache, bool editor) const;
+    void applyToListWidget(QListWidget *listWidget, DesignerIconCache *iconCache,
+                           bool editor,
+                           Qt::Alignment alignmentDefault = Qt::AlignLeading | Qt::AlignVCenter) const;
     void createFromComboBox(const QComboBox *listWidget);
     void applyToComboBox(QComboBox *listWidget, DesignerIconCache *iconCache) const;
 
diff --git a/src/designer/src/lib/shared/qdesigner_propertysheet.cpp b/src/designer/src/lib/shared/qdesigner_propertysheet.cpp
index c142ee7b1..b860c2dad 100644
--- a/src/designer/src/lib/shared/qdesigner_propertysheet.cpp
+++ b/src/designer/src/lib/shared/qdesigner_propertysheet.cpp
@@ -54,6 +54,7 @@
 #include <QtWidgets/qtoolbar.h>
 #include <QtWidgets/qmainwindow.h>
 #include <QtWidgets/qmenubar.h>
+#include <QtWidgets/qheaderview.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -561,6 +562,7 @@ QDesignerPropertySheet::PropertyType QDesignerPropertySheet::propertyTypeFromNam
         propertyTypeHash.insert(QStringLiteral("checkable"),               PropertyCheckable);
         propertyTypeHash.insert(QStringLiteral("accessibleName"),          PropertyAccessibility);
         propertyTypeHash.insert(QStringLiteral("accessibleDescription"),   PropertyAccessibility);
+        propertyTypeHash.insert(QStringLiteral("visible"),                 PropertyVisible);
         propertyTypeHash.insert(QStringLiteral("windowTitle"),             PropertyWindowTitle);
         propertyTypeHash.insert(QStringLiteral("windowIcon"),              PropertyWindowIcon);
         propertyTypeHash.insert(QStringLiteral("windowFilePath"),          PropertyWindowFilePath);
@@ -1066,7 +1068,22 @@ QVariant QDesignerPropertySheet::property(int index) const
         return QVariant::fromValue(value);
     }
 
-    return metaProperty(index);
+    QVariant result =  metaProperty(index);
+    // QTBUG-49591: "visible" is only exposed for QHeaderView as a fake
+    // property ("headerVisible") for the item view. If the item view is not
+    // visible (on a page based container), check the WA_WState_Hidden instead,
+    // since otherwise false is returned when saving.
+    if (result.type() == QVariant::Bool && !result.toBool()
+        && d->m_object->isWidgetType()
+        && propertyType(index) == PropertyVisible) {
+        if (auto *hv = qobject_cast<QHeaderView *>(d->m_object)) {
+            if (auto *parent = hv->parentWidget())  {
+                if (!parent->isVisible())
+                    result = QVariant(!hv->testAttribute(Qt::WA_WState_Hidden));
+            }
+        }
+    }
+    return result;
 }
 
 QVariant QDesignerPropertySheet::metaProperty(int index) const
diff --git a/src/designer/src/lib/shared/qdesigner_propertysheet_p.h b/src/designer/src/lib/shared/qdesigner_propertysheet_p.h
index 49380e1ee..e066d0c4f 100644
--- a/src/designer/src/lib/shared/qdesigner_propertysheet_p.h
+++ b/src/designer/src/lib/shared/qdesigner_propertysheet_p.h
@@ -157,6 +157,7 @@ public:
                         PropertyGeometry,
                         PropertyChecked,
                         PropertyCheckable,
+                        PropertyVisible,
                         PropertyWindowTitle,
                         PropertyWindowIcon,
                         PropertyWindowFilePath,
diff --git a/src/designer/src/lib/uilib/abstractformbuilder.cpp b/src/designer/src/lib/uilib/abstractformbuilder.cpp
index 4d39cdb5d..48f789687 100644
--- a/src/designer/src/lib/uilib/abstractformbuilder.cpp
+++ b/src/designer/src/lib/uilib/abstractformbuilder.cpp
@@ -1634,24 +1634,28 @@ static void storeItemFlags(const T *item, QList<DomProperty*> *properties)
 
 template<class T>
 static void storeItemProps(QAbstractFormBuilder *abstractFormBuilder, const T *item,
-        QList<DomProperty*> *properties)
+        QList<DomProperty*> *properties,
+        Qt::Alignment defaultAlign = Qt::AlignLeading | Qt::AlignVCenter)
 {
     static const QFormBuilderStrings &strings = QFormBuilderStrings::instance();
     FriendlyFB * const formBuilder = static_cast<FriendlyFB *>(abstractFormBuilder);
 
     DomProperty *p;
-    QVariant v;
 
     for (const QFormBuilderStrings::TextRoleNName &it : strings.itemTextRoles)
         if ((p = formBuilder->saveText(it.second, item->data(it.first.second))))
             properties->append(p);
 
-    for (const QFormBuilderStrings::RoleNName &it : strings.itemRoles)
-        if ((v = item->data(it.first)).isValid() &&
-            (p = variantToDomProperty(abstractFormBuilder,
-                static_cast<const QMetaObject *>(&QAbstractFormBuilderGadget::staticMetaObject),
-                it.second, v)))
+    auto *mo = static_cast<const QMetaObject *>(&QAbstractFormBuilderGadget::staticMetaObject);
+    for (const QFormBuilderStrings::RoleNName &it : strings.itemRoles) {
+        const QVariant v = item->data(it.first);
+        const bool isModified = v.isValid()
+            && (it.first != Qt::TextAlignmentRole || v.toUInt() != uint(defaultAlign));
+        if (isModified &&
+            (p = variantToDomProperty(abstractFormBuilder, mo, it.second, v))) {
             properties->append(p);
+        }
+    }
 
     if ((p = formBuilder->saveResource(item->data(Qt::DecorationPropertyRole))))
         properties->append(p);
@@ -1809,11 +1813,12 @@ void QAbstractFormBuilder::saveTableWidgetExtraInfo(QTableWidget *tableWidget, D
 
     // save the horizontal header
     QVector<DomColumn *> columns;
+    auto *header = tableWidget->horizontalHeader();
     for (int c = 0; c < tableWidget->columnCount(); c++) {
         QList<DomProperty*> properties;
         QTableWidgetItem *item = tableWidget->horizontalHeaderItem(c);
         if (item)
-            storeItemProps(this, item, &properties);
+            storeItemProps(this, item, &properties, header->defaultAlignment());
 
         DomColumn *column = new DomColumn;
         column->setElementProperty(properties);
@@ -1823,11 +1828,12 @@ void QAbstractFormBuilder::saveTableWidgetExtraInfo(QTableWidget *tableWidget, D
 
     // save the vertical header
     QVector<DomRow *> rows;
+    header = tableWidget->verticalHeader();
     for (int r = 0; r < tableWidget->rowCount(); r++) {
         QList<DomProperty*> properties;
         QTableWidgetItem *item = tableWidget->verticalHeaderItem(r);
         if (item)
-            storeItemProps(this, item, &properties);
+            storeItemProps(this, item, &properties, header->defaultAlignment());
 
         DomRow *row = new DomRow;
         row->setElementProperty(properties);
diff --git a/src/linguist/Qt5LinguistToolsMacros.cmake b/src/linguist/Qt5LinguistToolsMacros.cmake
index ab271d56a..20fb14935 100644
--- a/src/linguist/Qt5LinguistToolsMacros.cmake
+++ b/src/linguist/Qt5LinguistToolsMacros.cmake
@@ -41,6 +41,17 @@ function(QT5_CREATE_TRANSLATION _qm_files)
     set(_lupdate_files ${_LUPDATE_UNPARSED_ARGUMENTS})
     set(_lupdate_options ${_LUPDATE_OPTIONS})
 
+    list(FIND _lupdate_options "-extensions" _extensions_index)
+    if(_extensions_index GREATER -1)
+        math(EXPR _extensions_index "${_extensions_index} + 1")
+        list(GET _lupdate_options ${_extensions_index} _extensions_list)
+        string(REPLACE "," ";" _extensions_list "${_extensions_list}")
+        list(TRANSFORM _extensions_list STRIP)
+        list(TRANSFORM _extensions_list REPLACE "^\." "")
+        list(TRANSFORM _extensions_list PREPEND "*.")
+    else()
+        set(_extensions_list "*.java;*.jui;*.ui;*.c;*.c++;*.cc;*.cpp;*.cxx;*.ch;*.h;*.h++;*.hh;*.hpp;*.hxx;*.js;*.qs;*.qml;*.qrc")
+    endif()
     set(_my_sources)
     set(_my_tsfiles)
     foreach(_file ${_lupdate_files})
@@ -59,8 +70,16 @@ function(QT5_CREATE_TRANSLATION _qm_files)
           get_filename_component(_ts_name ${_ts_file} NAME)
           set(_ts_lst_file "${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${_ts_name}_lst_file")
           set(_lst_file_srcs)
+          set(_dependencies)
           foreach(_lst_file_src ${_my_sources})
               set(_lst_file_srcs "${_lst_file_src}\n${_lst_file_srcs}")
+              if(IS_DIRECTORY ${_lst_file_src})
+                  list(TRANSFORM _extensions_list PREPEND "${_lst_file_src}/" OUTPUT_VARIABLE _directory_glob)
+                  file(GLOB_RECURSE _directory_contents CONFIGURE_DEPENDS ${_directory_glob})
+                  list(APPEND _dependencies ${_directory_contents})
+              else()
+                  list(APPEND _dependencies "${_lst_file_src}")
+              endif()
           endforeach()
 
           get_directory_property(_inc_DIRS INCLUDE_DIRECTORIES)
@@ -74,8 +93,8 @@ function(QT5_CREATE_TRANSLATION _qm_files)
         add_custom_command(OUTPUT ${_ts_file}
             COMMAND ${Qt5_LUPDATE_EXECUTABLE}
             ARGS ${_lupdate_options} "@${_ts_lst_file}" -ts ${_ts_file}
-            DEPENDS ${_my_sources}
-            BYPRODUCTS ${_ts_lst_file} VERBATIM)
+            DEPENDS ${_dependencies}
+            VERBATIM)
     endforeach()
     qt5_add_translation(${_qm_files} ${_my_tsfiles})
     set(${_qm_files} ${${_qm_files}} PARENT_SCOPE)
diff --git a/src/linguist/linguist/mainwindow.cpp b/src/linguist/linguist/mainwindow.cpp
index 3f04a68f7..52b8044f6 100644
--- a/src/linguist/linguist/mainwindow.cpp
+++ b/src/linguist/linguist/mainwindow.cpp
@@ -1305,9 +1305,9 @@ void MainWindow::addToPhraseBook()
             return;
     } else {
         bool okPressed = false;
-        QString selectedPhraseBook = QInputDialog::getItem(this, tr("Add to phrase book"),
-                                tr("Select phrase book to add to"),
-                                phraseBookList, 0, false, &okPressed);
+        selectedPhraseBook = QInputDialog::getItem(this, tr("Add to phrase book"),
+                                                   tr("Select phrase book to add to"),
+                                                   phraseBookList, 0, false, &okPressed);
         if (!okPressed)
             return;
     }
@@ -1363,7 +1363,7 @@ void MainWindow::about()
     const QString description
             = tr("Qt Linguist is a tool for adding translations to Qt applications.");
     const QString copyright
-            = tr("Copyright (C) %1 The Qt Company Ltd.").arg(QStringLiteral("2020"));
+            = tr("Copyright (C) %1 The Qt Company Ltd.").arg(QStringLiteral("2021"));
     box.setText(QStringLiteral("<center><img src=\":/images/icons/linguist-128-32.png\"/></img><p>%1</p></center>"
                                "<p>%2</p>"
                                "<p>%3</p>").arg(version, description, copyright));
diff --git a/src/linguist/shared/qm.cpp b/src/linguist/shared/qm.cpp
index 288607824..d7728552d 100644
--- a/src/linguist/shared/qm.cpp
+++ b/src/linguist/shared/qm.cpp
@@ -552,12 +552,17 @@ bool loadQM(Translator &translator, QIODevice &dev, ConversionData &cd)
                 goto end;
             case Tag_Translation: {
                 int len = read32(m);
-                if (len % 1) {
+                m += 4;
+
+                // -1 indicates an empty string
+                // Otherwise streaming format is UTF-16 -> 2 bytes per character
+                if ((len != -1) && (len & 1)) {
                     cd.appendError(QLatin1String("QM-Format error"));
                     return false;
                 }
-                m += 4;
-                QString str = QString((const QChar *)m, len/2);
+                QString str;
+                if (len != -1)
+                    str = QString((const QChar *)m, len / 2);
                 if (QSysInfo::ByteOrder == QSysInfo::LittleEndian) {
                     for (int i = 0; i < str.length(); ++i)
                         str[i] = QChar((str.at(i).unicode() >> 8) +
diff --git a/src/qdbus/qdbusviewer/mainwindow.cpp b/src/qdbus/qdbusviewer/mainwindow.cpp
index 37a2ef783..949663616 100644
--- a/src/qdbus/qdbusviewer/mainwindow.cpp
+++ b/src/qdbus/qdbusviewer/mainwindow.cpp
@@ -90,7 +90,7 @@ void MainWindow::about()
                 "<h3>%1</h3>"
                 "<p>Version %2</p></center>"
                 "<p>Copyright (C) %3 The Qt Company Ltd.</p>")
-            .arg(tr("D-Bus Viewer"), QLatin1String(QT_VERSION_STR), QStringLiteral("2020")));
+            .arg(tr("D-Bus Viewer"), QLatin1String(QT_VERSION_STR), QStringLiteral("2021")));
     box.setWindowTitle(tr("D-Bus Viewer"));
     box.exec();
 }
diff --git a/src/qdbus/qdbusviewer/qdbusviewer.pro b/src/qdbus/qdbusviewer/qdbusviewer.pro
index 02ec7a2d2..07a47cd4c 100644
--- a/src/qdbus/qdbusviewer/qdbusviewer.pro
+++ b/src/qdbus/qdbusviewer/qdbusviewer.pro
@@ -23,7 +23,7 @@ mac {
 }
 
 win32 {
-    RC_FILE = qdbusviewer.rc
+    RC_ICONS = images/qdbusviewer.ico
 }
 
 load(qt_app)
diff --git a/src/qdbus/qdbusviewer/qdbusviewer.rc b/src/qdbus/qdbusviewer/qdbusviewer.rc
deleted file mode 100644
index c4b1d60b8..000000000
--- a/src/qdbus/qdbusviewer/qdbusviewer.rc
+++ /dev/null
@@ -1 +0,0 @@
-IDI_ICON1		ICON		DISCARDABLE	"images/qdbusviewer.ico"
diff --git a/src/qdoc/doc/qdoc-manual-intro.qdoc b/src/qdoc/doc/qdoc-manual-intro.qdoc
index 525445b4f..b18d9b0e0 100644
--- a/src/qdoc/doc/qdoc-manual-intro.qdoc
+++ b/src/qdoc/doc/qdoc-manual-intro.qdoc
@@ -205,7 +205,7 @@
     module's, that module is said to depend on those other Qt modules.
     Hence when QDoc runs the \e {generate phase} for that module, it
     must also load the index files for those modules so it can create
-    those thinks.
+    those links.
 
     Hence, when the Qt build system generates the Qt documentation, it
     first runs QDoc once for each module to perform the \e {prepare
diff --git a/src/qdoc/doc/qdoc-manual-topiccmds.qdoc b/src/qdoc/doc/qdoc-manual-topiccmds.qdoc
index 0837648b7..7d906ce64 100644
--- a/src/qdoc/doc/qdoc-manual-topiccmds.qdoc
+++ b/src/qdoc/doc/qdoc-manual-topiccmds.qdoc
@@ -930,22 +930,24 @@
 
     \list
 
+    \li api - This is the type of page used for C++ class references and
+    QML type references. You should never use this one for the pages
+    you write, because this one is reserved for QDoc.
+
+    \li attribution - A page describing (code) attributions.
+
+    \li example - A page that describes a working example.
+
     \li faq - A frequently asked question.
 
     \li howto - A user guide on how to use some components of the
     software.
 
-    \li example - A page that describes a working example.
-
     \li overview - For text pages that provide an overview of some
     important subject.
 
     \li tutorial - For text pages that are part of a tutorial.
 
-    \li api - This is the type of page used for C++ class references and
-    QML type references. You should never use this one for the pages
-    you write, because this one is reserved for QDoc.
-
     \endlist
 
     The page title is set using the \l {title-command} {\\title}
diff --git a/src/qdoc/docbookgenerator.cpp b/src/qdoc/docbookgenerator.cpp
index 3e4f03cf0..b5acf4d7b 100644
--- a/src/qdoc/docbookgenerator.cpp
+++ b/src/qdoc/docbookgenerator.cpp
@@ -2436,12 +2436,10 @@ void DocBookGenerator::generateCppReferencePage(Node *node)
     QString title;
     QString rawTitle;
     QString fullTitle;
-    const NamespaceNode *ns = nullptr;
     if (aggregate->isNamespace()) {
         rawTitle = aggregate->plainName();
         fullTitle = aggregate->plainFullName();
         title = rawTitle + " Namespace";
-        ns = static_cast<const NamespaceNode *>(aggregate);
     } else if (aggregate->isClass()) {
         rawTitle = aggregate->plainName();
         QString templateDecl = node->templateDecl();
@@ -2449,6 +2447,8 @@ void DocBookGenerator::generateCppReferencePage(Node *node)
             fullTitle = QString("%1 %2 ").arg(templateDecl, aggregate->typeWord(false));
         fullTitle += aggregate->plainFullName();
         title = rawTitle + QLatin1Char(' ') + aggregate->typeWord(true);
+    } else if (aggregate->isHeader()) {
+        title = fullTitle = rawTitle = aggregate->fullTitle();
     }
 
     QString subtitleText;
@@ -2479,8 +2479,10 @@ void DocBookGenerator::generateCppReferencePage(Node *node)
     }
 
     Sections sections(const_cast<Aggregate *>(aggregate));
-    SectionVector *sectionVector =
-            ns ? &sections.stdDetailsSections() : &sections.stdCppClassDetailsSections();
+    auto *sectionVector =
+            (aggregate->isNamespace() || aggregate->isHeader()) ?
+                    &sections.stdDetailsSections() :
+                    &sections.stdCppClassDetailsSections();
     SectionVector::ConstIterator section = sectionVector->constBegin();
     while (section != sectionVector->constEnd()) {
         bool headerGenerated = false;
@@ -3420,8 +3422,9 @@ void DocBookGenerator::generateAddendum(const Node *node, Addendum type, CodeMar
     case QmlSignalHandler:
     {
         QString handler(node->name());
-        handler[0] = handler[0].toTitleCase();
-        handler.prepend(QLatin1String("on"));
+        int prefixLocation = handler.lastIndexOf('.', -2) + 1;
+        handler[prefixLocation] = handler[prefixLocation].toTitleCase();
+        handler.insert(prefixLocation, QLatin1String("on"));
         writer->writeStartElement(dbNamespace, "para");
         writer->writeCharacters("The corresponding handler is ");
         writer->writeTextElement(dbNamespace, "code", handler);
diff --git a/src/qdoc/generator.cpp b/src/qdoc/generator.cpp
index b3aacb623..e753d3090 100644
--- a/src/qdoc/generator.cpp
+++ b/src/qdoc/generator.cpp
@@ -1387,8 +1387,9 @@ void Generator::generateAddendum(const Node *node, Addendum type, CodeMarker *ma
     case QmlSignalHandler:
     {
         QString handler(node->name());
-        handler[0] = handler[0].toTitleCase();
-        handler.prepend(QLatin1String("on"));
+        int prefixLocation = handler.lastIndexOf('.', -2) + 1;
+        handler[prefixLocation] = handler[prefixLocation].toTitleCase();
+        handler.insert(prefixLocation, QLatin1String("on"));
         text << "The corresponding handler is "
              << Atom(Atom::FormattingLeft, ATOM_FORMATTING_TELETYPE) << handler
              << Atom(Atom::FormattingRight, ATOM_FORMATTING_TELETYPE) << ".";
diff --git a/src/qdoc/helpprojectwriter.cpp b/src/qdoc/helpprojectwriter.cpp
index d411802dc..37d048b7a 100644
--- a/src/qdoc/helpprojectwriter.cpp
+++ b/src/qdoc/helpprojectwriter.cpp
@@ -234,7 +234,7 @@ bool HelpProjectWriter::generateSection(HelpProject &project, QXmlStreamWriter &
     if (!node->url().isEmpty() && !(project.includeIndexNodes && !node->url().startsWith("http")))
         return false;
 
-    if (node->isPrivate() || node->isInternal())
+    if (node->isPrivate() || node->isInternal() || node->isDontDocument())
         return false;
 
     if (node->name().isEmpty())
@@ -657,7 +657,9 @@ void HelpProjectWriter::generateProject(HelpProject &project)
     writer.writeStartElement("toc");
     writer.writeStartElement("section");
     const Node *node = qdb_->findPageNodeByTitle(project.indexTitle);
-    if (node == nullptr)
+    if (!node)
+        node = qdb_->findNodeByNameAndType(QStringList(project.indexTitle), &Node::isPageNode);
+    if (!node)
         node = qdb_->findNodeByNameAndType(QStringList("index.html"), &Node::isPageNode);
     QString indexPath;
     if (node)
diff --git a/src/qdoc/htmlgenerator.cpp b/src/qdoc/htmlgenerator.cpp
index a554f1ac4..aaea6a65f 100644
--- a/src/qdoc/htmlgenerator.cpp
+++ b/src/qdoc/htmlgenerator.cpp
@@ -1286,8 +1286,12 @@ void HtmlGenerator::generateCppReferencePage(Aggregate *aggregate, CodeMarker *m
         QString command = "documentation";
         if (aggregate->isClassNode())
             command = "\'\\class\' comment";
-        aggregate->location().warning(
-                tr("No %1 for '%2'").arg(command).arg(aggregate->plainSignature()));
+        if (!ns || ns->isDocumentedHere()) {
+            aggregate->location().warning(
+                    tr("No %1 for '%2'")
+                        .arg(command)
+                        .arg(aggregate->plainSignature()));
+        }
     } else {
         generateExtractionMark(aggregate, DetailedDescriptionMark);
         out() << "<div class=\"descr\">\n" // QTBUG-9504
@@ -1774,8 +1778,8 @@ void HtmlGenerator::generateNavigationBar(const QString &title, const Node *node
                           << Atom(Atom::FormattingRight, ATOM_FORMATTING_LINK) << Atom(itemRight)
                           << Atom(itemLeft) << Atom(Atom::String, title) << Atom(itemRight);
     } else {
-        if (node->isAggregate()) {
-            QStringList groups = static_cast<const Aggregate *>(node)->groupNames();
+        if (node->isPageNode()) {
+            QStringList groups = static_cast<const PageNode *>(node)->groupNames();
             if (groups.length() == 1) {
                 const Node *groupNode =
                         qdb_->findNodeByNameAndType(QStringList(groups[0]), &Node::isGroup);
@@ -2290,8 +2294,8 @@ void HtmlGenerator::generateTableOfContents(const Node *node, CodeMarker *marker
             }
         }
     } else if (sections
-               && (node->isClassNode() || node->isNamespace() || node->isQmlType()
-                   || node->isJsType())) {
+               && (node->isClassNode() || node->isNamespace() || node->isQmlType() ||
+                   node->isJsType() || node->isQmlBasicType() || node->isJsBasicType())) {
         for (const auto &section : qAsConst(*sections)) {
             if (!section.members().isEmpty()) {
                 out() << "<li class=\"level" << sectionNumber << "\"><a href=\"#"
@@ -3981,7 +3985,7 @@ void HtmlGenerator::generateManifestFile(const QString &manifest, const QString
         // Include tags added via \meta {tag} {tag1[,tag2,...]}
         // within \example topic
         for (const auto &tag : en->doc().metaTagMap().values("tag")) {
-            const auto &tagList = tag.toLower().split(QLatin1Char(','));
+            const auto &tagList = tag.toLower().split(QLatin1Char(','), Qt::SkipEmptyParts);
             tags += QSet<QString>(tagList.cbegin(), tagList.cend());
         }
 
diff --git a/src/qdoc/jscodemarker.cpp b/src/qdoc/jscodemarker.cpp
index b3c675d5b..0e1eb2267 100644
--- a/src/qdoc/jscodemarker.cpp
+++ b/src/qdoc/jscodemarker.cpp
@@ -78,16 +78,16 @@ bool JsCodeMarker::recognizeCode(const QString &code)
  */
 bool JsCodeMarker::recognizeExtension(const QString &ext)
 {
-    return ext == "js" || ext == "json";
+    return ext == "js";
 }
 
 /*!
-  Returns \c true if the \a language is recognized. We recognize JavaScript,
-  ECMAScript and JSON.
+  Returns \c true if the \a language is recognized. We recognize JavaScript and
+  ECMAScript.
  */
 bool JsCodeMarker::recognizeLanguage(const QString &language)
 {
-    return language == "JavaScript" || language == "ECMAScript" || language == "JSON";
+    return language == "JavaScript" || language == "ECMAScript";
 }
 
 /*!
diff --git a/src/qdoc/location.cpp b/src/qdoc/location.cpp
index a63b1780e..ea2257980 100644
--- a/src/qdoc/location.cpp
+++ b/src/qdoc/location.cpp
@@ -325,7 +325,8 @@ void Location::initialize()
     tabSize = config.getInt(CONFIG_TABSIZE);
     programName = config.programName();
     project = config.getString(CONFIG_PROJECT);
-    warningCount = 0;
+    if (!config.singleExec())
+        warningCount = 0;
     if (qEnvironmentVariableIsSet("QDOC_ENABLE_WARNINGLIMIT")
         || config.getBool(CONFIG_WARNINGLIMIT + Config::dot + "enabled"))
         warningLimit = config.getInt(CONFIG_WARNINGLIMIT);
diff --git a/src/qdoc/node.cpp b/src/qdoc/node.cpp
index 82306eeed..29985a8bc 100644
--- a/src/qdoc/node.cpp
+++ b/src/qdoc/node.cpp
@@ -2749,6 +2749,8 @@ void Aggregate::findAllAttributions(NodeMultiMap &attributions)
 void Aggregate::findAllSince()
 {
     for (auto *node : qAsConst(children_)) {
+        if (node->isRelatedNonmember() && node->parent() != this)
+            continue;
         QString sinceString = node->since();
         // Insert a new entry into each map for each new since string found.
         if (!node->isPrivate() && !sinceString.isEmpty()) {
diff --git a/src/qdoc/webxmlgenerator.cpp b/src/qdoc/webxmlgenerator.cpp
index 4d8906f6a..59e83b1b0 100644
--- a/src/qdoc/webxmlgenerator.cpp
+++ b/src/qdoc/webxmlgenerator.cpp
@@ -748,7 +748,7 @@ void WebXMLGenerator::startLink(QXmlStreamWriter &writer, const Atom *atom, cons
         fullName = node->fullName();
     if (!fullName.isEmpty() && !link.isEmpty()) {
         writer.writeStartElement("link");
-        if (!atom->string().isEmpty())
+        if (atom && !atom->string().isEmpty())
             writer.writeAttribute("raw", atom->string());
         else
             writer.writeAttribute("raw", fullName);
diff --git a/src/qtpaths/qtpaths.cpp b/src/qtpaths/qtpaths.cpp
index 340a2ac43..9a9c90577 100644
--- a/src/qtpaths/qtpaths.cpp
+++ b/src/qtpaths/qtpaths.cpp
@@ -79,30 +79,44 @@ Q_NORETURN static void error(const QString &message)
     ::exit(EXIT_FAILURE);
 }
 
-
-/*
- * NOTE: that DataLocation and CacheLocation are missing as
- * they don't really make sense for a utility like this because
- * they include the application name.
- */
-static const struct StringEnum {
+class StringEnum {
+public:
     const char *stringvalue;
     QStandardPaths::StandardLocation enumvalue;
-} lookupTableData[] = {
-    { "ApplicationsLocation", QStandardPaths::ApplicationsLocation },
-    { "DesktopLocation", QStandardPaths::DesktopLocation },
-    { "DocumentsLocation", QStandardPaths::DocumentsLocation },
-    { "FontsLocation", QStandardPaths::FontsLocation },
-    { "MusicLocation", QStandardPaths::MusicLocation },
-    { "MoviesLocation", QStandardPaths::MoviesLocation },
-    { "PicturesLocation", QStandardPaths::PicturesLocation },
-    { "HomeLocation", QStandardPaths::HomeLocation },
-    { "GenericCacheLocation", QStandardPaths::GenericCacheLocation },
-    { "GenericDataLocation", QStandardPaths::GenericDataLocation },
-    { "RuntimeLocation", QStandardPaths::RuntimeLocation },
-    { "ConfigLocation", QStandardPaths::ConfigLocation },
-    { "GenericConfigLocation", QStandardPaths::GenericConfigLocation },
-    { "DownloadLocation", QStandardPaths::DownloadLocation }
+    bool hasappname;
+
+    /**
+    * Replace application name by generic name if requested
+    */
+    QString mapName(const QString &s) const
+    {
+        return hasappname ? QString(s).replace("qtpaths", "<APPNAME>") : s;
+    }
+};
+
+static const StringEnum lookupTableData[] = {
+    { "AppConfigLocation", QStandardPaths::AppConfigLocation, true },
+    { "AppDataLocation", QStandardPaths::AppDataLocation, true },
+    { "AppLocalDataLocation", QStandardPaths::AppLocalDataLocation, true },
+    { "ApplicationsLocation", QStandardPaths::ApplicationsLocation, false },
+    { "CacheLocation", QStandardPaths::CacheLocation, true },
+    { "ConfigLocation", QStandardPaths::ConfigLocation, false },
+#if QT_VERSION < QT_VERSION_CHECK(6,0,0)
+    { "DataLocation", QStandardPaths::DataLocation, true },
+#endif
+    { "DesktopLocation", QStandardPaths::DesktopLocation, false },
+    { "DocumentsLocation", QStandardPaths::DocumentsLocation, false },
+    { "DownloadLocation", QStandardPaths::DownloadLocation, false },
+    { "FontsLocation", QStandardPaths::FontsLocation, false },
+    { "GenericCacheLocation", QStandardPaths::GenericCacheLocation, false },
+    { "GenericConfigLocation", QStandardPaths::GenericConfigLocation, false },
+    { "GenericDataLocation", QStandardPaths::GenericDataLocation, false },
+    { "HomeLocation", QStandardPaths::HomeLocation, false },
+    { "MoviesLocation", QStandardPaths::MoviesLocation, false },
+    { "MusicLocation", QStandardPaths::MusicLocation, false },
+    { "PicturesLocation", QStandardPaths::PicturesLocation, false },
+    { "RuntimeLocation", QStandardPaths::RuntimeLocation, false },
+    { "TempLocation", QStandardPaths::TempLocation, false }
 };
 
 /**
@@ -118,14 +132,14 @@ static QStringList types()
 }
 
 /**
- * Tries to parse the location string into a StandardLocation or alternatively
+ * Tries to arse the location string into a reference to a StringEnum entry or alternatively
  * calls \ref error with a error message
  */
-static QStandardPaths::StandardLocation parseLocationOrError(const QString &locationString)
+static const StringEnum &parseLocationOrError(const QString &locationString)
 {
     for (const StringEnum &se : lookupTableData)
         if (locationString == QLatin1String(se.stringvalue))
-            return se.enumvalue;
+            return se;
 
     QString message = QCoreApplication::translate("qtpaths", "Unknown location: %1");
     error(message.arg(locationString));
@@ -246,21 +260,21 @@ int main(int argc, char **argv)
     }
 
     if (parser.isSet(display)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(display));
-        QString text = QStandardPaths::displayName(location);
-        results << text;
+        const StringEnum &location = parseLocationOrError(parser.value(display));
+        QString text = QStandardPaths::displayName(location.enumvalue);
+        results << location.mapName(text);
     }
 
     if (parser.isSet(paths)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(paths));
-        QStringList paths = QStandardPaths::standardLocations(location);
-        results << paths.join(pathsep);
+        const StringEnum &location = parseLocationOrError(parser.value(paths));
+        QStringList paths = QStandardPaths::standardLocations(location.enumvalue);
+        results << location.mapName(paths.join(pathsep));
     }
 
     if (parser.isSet(writablePath)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(writablePath));
-        QString path = QStandardPaths::writableLocation(location);
-        results << path;
+        const StringEnum &location = parseLocationOrError(parser.value(writablePath));
+        QString path = QStandardPaths::writableLocation(location.enumvalue);
+        results << location.mapName(path);
     }
 
     if (parser.isSet(findExe)) {
@@ -270,31 +284,31 @@ int main(int argc, char **argv)
     }
 
     if (parser.isSet(locateDir)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(locateDir));
+        const StringEnum &location = parseLocationOrError(parser.value(locateDir));
         QString searchitem = searchStringOrError(&parser);
-        QString path = QStandardPaths::locate(location, searchitem, QStandardPaths::LocateDirectory);
-        results << path;
+        QString path = QStandardPaths::locate(location.enumvalue, searchitem, QStandardPaths::LocateDirectory);
+        results << location.mapName(path);
     }
 
     if (parser.isSet(locateFile)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(locateFile));
+        const StringEnum &location = parseLocationOrError(parser.value(locateFile));
         QString searchitem = searchStringOrError(&parser);
-        QString path = QStandardPaths::locate(location, searchitem, QStandardPaths::LocateFile);
-        results << path;
+        QString path = QStandardPaths::locate(location.enumvalue, searchitem, QStandardPaths::LocateFile);
+        results << location.mapName(path);
     }
 
     if (parser.isSet(locateDirs)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(locateDirs));
+        const StringEnum &location = parseLocationOrError(parser.value(locateDirs));
         QString searchitem = searchStringOrError(&parser);
-        QStringList paths = QStandardPaths::locateAll(location, searchitem, QStandardPaths::LocateDirectory);
-        results << paths.join(pathsep);
+        QStringList paths = QStandardPaths::locateAll(location.enumvalue, searchitem, QStandardPaths::LocateDirectory);
+        results << location.mapName(paths.join(pathsep));
     }
 
     if (parser.isSet(locateFiles)) {
-        QStandardPaths::StandardLocation location = parseLocationOrError(parser.value(locateFiles));
+        const StringEnum &location = parseLocationOrError(parser.value(locateFiles));
         QString searchitem = searchStringOrError(&parser);
-        QStringList paths = QStandardPaths::locateAll(location, searchitem, QStandardPaths::LocateFile);
-        results << paths.join(pathsep);
+        QStringList paths = QStandardPaths::locateAll(location.enumvalue, searchitem, QStandardPaths::LocateFile);
+        results << location.mapName(paths.join(pathsep));
     }
     if (results.isEmpty()) {
         parser.showHelp();
diff --git a/src/windeployqt/main.cpp b/src/windeployqt/main.cpp
index 0f5bde717..ed7be2f35 100644
--- a/src/windeployqt/main.cpp
+++ b/src/windeployqt/main.cpp
@@ -1334,7 +1334,18 @@ static DeployResult deploy(const Options &options,
                     const QString icuVersion = icuLibs.front().mid(index, numberExpression.matchedLength());
                     if (optVerboseLevel > 1)
                         std::wcout << "Adding ICU version " << icuVersion << '\n';
-                    icuLibs.push_back(QStringLiteral("icudt") + icuVersion + QLatin1String(windowsSharedLibrarySuffix));
+                    QString icuLib = QStringLiteral("icudt") + icuVersion
+                            + QLatin1String(windowsSharedLibrarySuffix);;
+                    // Some packages contain debug dlls of ICU libraries even though it's a C
+                    // library and the official packages do not differentiate (QTBUG-87677)
+                    if (result.isDebug) {
+                        const QString icuLibCandidate = QStringLiteral("icudtd") + icuVersion
+                                + QLatin1String(windowsSharedLibrarySuffix);
+                        if (!findInPath(icuLibCandidate).isEmpty()) {
+                            icuLib = icuLibCandidate;
+                        }
+                    }
+                    icuLibs.push_back(icuLib);
                 }
                 for (const QString &icuLib : qAsConst(icuLibs)) {
                     const QString icuPath = findInPath(icuLib);
diff --git a/tests/auto/linguist/lconvert/data/untranslated.qm b/tests/auto/linguist/lconvert/data/untranslated.qm
new file mode 100644
index 000000000..e31d2553a
Binary files /dev/null and b/tests/auto/linguist/lconvert/data/untranslated.qm differ
diff --git a/tests/auto/linguist/lconvert/tst_lconvert.cpp b/tests/auto/linguist/lconvert/tst_lconvert.cpp
index 2b3729d6c..7ddfd5c01 100644
--- a/tests/auto/linguist/lconvert/tst_lconvert.cpp
+++ b/tests/auto/linguist/lconvert/tst_lconvert.cpp
@@ -282,6 +282,7 @@ void tst_lconvert::roundtrips_data()
     QStringList tsPoTs; tsPoTs << "ts" << "po" << "ts";
     QStringList tsXlfTs; tsXlfTs << "ts" << "xlf" << "ts";
     QStringList tsQmTs; tsQmTs << "ts" << "qm" << "ts";
+    QStringList qmTsQm; qmTsQm << "qm" << "ts" << "qm";
 
     QList<QStringList> noArgs;
     QList<QStringList> filterPoArgs; filterPoArgs << QStringList() << (QStringList() << "-drop-tag" << "po:*");
@@ -318,6 +319,7 @@ void tst_lconvert::roundtrips_data()
 
     QTest::newRow("ts-po-ts (endless loop)") << "endless-po-loop.ts" << tsPoTs << noArgs;
     QTest::newRow("ts-qm-ts (whitespace)") << "whitespace.ts" << tsQmTs << noArgs;
+    QTest::newRow("qm-ts-qm (untranslated)") << "untranslated.qm" << qmTsQm << noArgs;
 }
 
 void tst_lconvert::roundtrips()
diff --git a/tests/auto/qdoc/generatedoutput/expected_output/dontdocument/dontdocument.qhp b/tests/auto/qdoc/generatedoutput/expected_output/dontdocument/dontdocument.qhp
new file mode 100644
index 000000000..098200a95
--- /dev/null
+++ b/tests/auto/qdoc/generatedoutput/expected_output/dontdocument/dontdocument.qhp
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<QtHelpProject version="1.0">
+    <namespace>org.qt-project.dontdocument.001</namespace>
+    <virtualFolder>test</virtualFolder>
+    <metaData name="version" value=""/>
+    <filterSection>
+        <toc>
+            <section ref="testcpp-module.html" title="QDoc Test C++ Classes">
+                <section ref="testcpp-module.html" title="Classes">
+                    <section ref="seenclass.html" title="SeenClass Class Reference"/>
+                    <section ref="testqdoc-test.html" title="TestQDoc::Test Class Reference">
+                        <section ref="testqdoc-test-members.html" title="List of all members"/>
+                        <section ref="testqdoc-test-obsolete.html" title="Obsolete members"/>
+                    </section>
+                    <section ref="testqdoc-testderived.html" title="TestQDoc::TestDerived Class Reference">
+                        <section ref="testqdoc-testderived-members.html" title="List of all members"/>
+                    </section>
+                </section>
+            </section>
+        </toc>
+        <keywords>
+            <keyword name="Classes" id="Classes" ref="classes.html"/>
+            <keyword name="QDOCTEST_MACRO" id="QDOCTEST_MACRO" ref="testqdoc.html#QDOCTEST_MACRO"/>
+            <keyword name="QDOCTEST_MACRO2" id="QDOCTEST_MACRO2" ref="testqdoc-test.html#QDOCTEST_MACRO2"/>
+            <keyword name="QDoc Test C++ Classes" id="QDoc Test C++ Classes" ref="testcpp-module.html"/>
+            <keyword name="SeenClass" id="SeenClass" ref="seenclass.html"/>
+            <keyword name="Test" id="TestQDoc::Test" ref="testqdoc-test.html"/>
+            <keyword name="Test::SomeType" id="Test::SomeType" ref="testqdoc-test.html#SomeType-typedef"/>
+            <keyword name="TestDerived" id="TestQDoc::TestDerived" ref="testqdoc-testderived.html"/>
+            <keyword name="TestDerived::DerivedType" id="TestDerived::DerivedType" ref="testqdoc-testderived.html#DerivedType-alias"/>
+            <keyword name="TestDerived::NotTypedef" id="TestDerived::NotTypedef" ref="testqdoc-testderived.html#NotTypedef-alias"/>
+            <keyword name="TestQDoc" id="TestQDoc" ref="testqdoc.html"/>
+            <keyword name="anotherObsoleteMember" id="Test::anotherObsoleteMember" ref="testqdoc-test-obsolete.html#anotherObsoleteMember"/>
+            <keyword name="deprecatedMember" id="Test::deprecatedMember" ref="testqdoc-test-obsolete.html#deprecatedMember"/>
+            <keyword name="inlineFunction" id="Test::inlineFunction" ref="testqdoc-test.html#inlineFunction"/>
+            <keyword name="obsoleteMember" id="Test::obsoleteMember" ref="testqdoc-test-obsolete.html#obsoleteMember"/>
+            <keyword name="overload" id="Test::overload" ref="testqdoc-test.html#overload"/>
+            <keyword name="someFunction" id="Test::someFunction" ref="testqdoc-test.html#someFunction"/>
+            <keyword name="someFunctionDefaultArg" id="Test::someFunctionDefaultArg" ref="testqdoc-test.html#someFunctionDefaultArg"/>
+            <keyword name="virtualFun" id="Test::virtualFun" ref="testqdoc-test.html#virtualFun"/>
+            <keyword name="virtualFun" id="TestDerived::virtualFun" ref="testqdoc-testderived.html#virtualFun"/>
+        </keywords>
+        <files>
+            <file>classes.html</file>
+            <file>seenclass.html</file>
+            <file>testcpp-module.html</file>
+            <file>testqdoc-test-members.html</file>
+            <file>testqdoc-test-obsolete.html</file>
+            <file>testqdoc-test.html</file>
+            <file>testqdoc-testderived-members.html</file>
+            <file>testqdoc-testderived.html</file>
+            <file>testqdoc.html</file>
+        </files>
+    </filterSection>
+</QtHelpProject>
diff --git a/tests/auto/qdoc/generatedoutput/expected_output/headerfile-docbook/testheader.xml b/tests/auto/qdoc/generatedoutput/expected_output/headerfile-docbook/testheader.xml
index f3461fb1a..afa0b20a3 100644
--- a/tests/auto/qdoc/generatedoutput/expected_output/headerfile-docbook/testheader.xml
+++ b/tests/auto/qdoc/generatedoutput/expected_output/headerfile-docbook/testheader.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
 <db:info>
-<db:title></db:title>
+<db:title>&lt;TestHeader&gt; - Test Header</db:title>
 <db:productname>HeaderFile</db:productname>
 <db:titleabbrev>HeaderFile Reference Documentation</db:titleabbrev>
 <db:abstract>
@@ -19,4 +19,72 @@
 <db:section xml:id="details">
 <db:title>Detailed Description</db:title>
 </db:section>
+<db:section xml:id="type-documentation">
+<db:title>Type Documentation</db:title>
+<db:section xml:id="Globals-enum">
+<db:title>enum Globals</db:title>
+<db:enumsynopsis>
+<db:enumname>Globals</db:enumname>
+<db:synopsisinfo db:role="access">public</db:synopsisinfo>
+<db:synopsisinfo db:role="status">active</db:synopsisinfo>
+<db:synopsisinfo db:role="threadsafeness">unspecified</db:synopsisinfo>
+<db:synopsisinfo db:role="module">HeaderFile</db:synopsisinfo>
+<db:enumitem db:enumidentifier="Glo" db:enumvalue="0"/>
+<db:enumitem db:enumidentifier="Bal" db:enumvalue="1"/>
+</db:enumsynopsis>
+<db:informaltable>
+<db:thead>
+<db:tr>
+<db:th>Constant</db:th>
+<db:th>Description</db:th>
+</db:tr>
+</db:thead>
+<db:tr>
+<db:td>
+<db:para><db:code>Glo</db:code></db:para>
+</db:td>
+<db:td><db:code>0</db:code></db:td>
+</db:tr>
+<db:tr>
+<db:td>
+<db:para><db:code>Bal</db:code></db:para>
+</db:td>
+<db:td><db:code>1</db:code></db:td>
+</db:tr>
+</db:informaltable>
+</db:section>
+</db:section>
+<db:section xml:id="variable-documentation">
+<db:title>Variable Documentation</db:title>
+<db:section xml:id="globalVar-var">
+<db:title>const int globalVar</db:title>
+<db:fieldsynopsis>
+<db:type>const int</db:type>
+<db:varname>globalVar</db:varname>
+<db:synopsisinfo db:role="access">public</db:synopsisinfo>
+<db:synopsisinfo db:role="status">active</db:synopsisinfo>
+<db:synopsisinfo db:role="threadsafeness">unspecified</db:synopsisinfo>
+<db:synopsisinfo db:role="module">HeaderFile</db:synopsisinfo>
+</db:fieldsynopsis>
+<db:para>Global variable.</db:para>
+</db:section>
+</db:section>
+<db:section xml:id="function-documentation">
+<db:title>Function Documentation</db:title>
+<db:section xml:id="globalFunc">
+<db:title>void globalFunc()</db:title>
+<db:methodsynopsis>
+<db:void/>
+<db:methodname>globalFunc</db:methodname>
+<db:void/>
+<db:synopsisinfo db:role="meta">plain</db:synopsisinfo>
+<db:synopsisinfo db:role="signature">void globalFunc()</db:synopsisinfo>
+<db:synopsisinfo db:role="access">public</db:synopsisinfo>
+<db:synopsisinfo db:role="status">active</db:synopsisinfo>
+<db:synopsisinfo db:role="threadsafeness">unspecified</db:synopsisinfo>
+<db:synopsisinfo db:role="module">HeaderFile</db:synopsisinfo>
+</db:methodsynopsis>
+<db:para>Global function.</db:para>
+</db:section>
+</db:section>
 </db:article>
diff --git a/tests/auto/qdoc/generatedoutput/expected_output/qml-int.html b/tests/auto/qdoc/generatedoutput/expected_output/qml-int.html
index 0b21da628..16603af4b 100644
--- a/tests/auto/qdoc/generatedoutput/expected_output/qml-int.html
+++ b/tests/auto/qdoc/generatedoutput/expected_output/qml-int.html
@@ -10,6 +10,8 @@
 <div class="toc">
 <h3><a name="toc">Contents</a></h3>
 <ul>
+<li class="level1"><a href="#methods">Methods</a></li>
+<li class="level1"><a href="#details">Detailed Description</a></li>
 </ul>
 </div>
 <div class="sidebar-content" id="sidebar-content"></div></div>
diff --git a/tests/auto/qdoc/generatedoutput/testdata/dontdocument/dontdocument.qdocconf b/tests/auto/qdoc/generatedoutput/testdata/dontdocument/dontdocument.qdocconf
index 117920e56..ef45f50a6 100644
--- a/tests/auto/qdoc/generatedoutput/testdata/dontdocument/dontdocument.qdocconf
+++ b/tests/auto/qdoc/generatedoutput/testdata/dontdocument/dontdocument.qdocconf
@@ -3,5 +3,19 @@ include(../configs/testcpp.qdocconf)
 headers += dont.h
 sources += dont.cpp test.qdoc
 
+qhp.projects                    = DontDocument
+
+qhp.DontDocument.file           = dontdocument.qhp
+qhp.DontDocument.namespace      = org.qt-project.dontdocument.001
+qhp.DontDocument.virtualFolder  = test
+qhp.DontDocument.indexTitle     = QDoc Test C++ Classes
+qhp.DontDocument.indexRoot      =
+
+qhp.DontDocument.subprojects                        = classes
+qhp.DontDocument.subprojects.classes.title          = Classes
+qhp.DontDocument.subprojects.classes.indexTitle     = QDoc Test C++ Classes
+qhp.DontDocument.subprojects.classes.selectors      = class
+qhp.DontDocument.subprojects.classes.sortPages      = true
+
 HTML.nosubdirs = true
 HTML.outputsubdir = dontdocument
diff --git a/tests/auto/qdoc/generatedoutput/tst_generatedoutput.cpp b/tests/auto/qdoc/generatedoutput/tst_generatedoutput.cpp
index fd68159a2..a83ba337f 100644
--- a/tests/auto/qdoc/generatedoutput/tst_generatedoutput.cpp
+++ b/tests/auto/qdoc/generatedoutput/tst_generatedoutput.cpp
@@ -349,7 +349,8 @@ void tst_generatedOutput::dontDocument()
 {
     testAndCompare("testdata/dontdocument/dontdocument.qdocconf",
                    "dontdocument/classes.html "
-                   "dontdocument/seenclass.html");
+                   "dontdocument/seenclass.html "
+                   "dontdocument/dontdocument.qhp");
 }
 
 void tst_generatedOutput::inheritedQmlPropertyGroups()
